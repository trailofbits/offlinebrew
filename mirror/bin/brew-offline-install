#!/usr/bin/env ruby
# frozen_string_literal: true

require "json"

CORE_TAP_DIR = "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/"

at_exit do
  Dir.chdir CORE_TAP_DIR do
    `git checkout master`
  end
end

# We're doing a lot of fiddling below, so we want Homebrew to be as loud
# as possible about everything it does.
ENV["HOMEBREW_VERBOSE"] = "1"

# We want to minimize the number of non-package network requests we do,
# both for performance and stability reasons.
ENV["HOMEBREW_NO_ANALYTICS"] = "1"

# We also don't want Homebrew changing the versions of packages underneath
# us without having a chance to update the mirror first.
ENV["HOMEBREW_NO_AUTO_UPDATE"] = "1"

# Homebrew will try to use GitHub's REST API to minimize (presumably expensive)
# `git` backend operations. But we don't support GitHub's rest API, so we
# need to tell Homebrew not to treat GitHub git repositories specially.
ENV["HOMEBREW_NO_GITHUB_API"] = "1"

# HOMEBREW_BUILD_FROM_SOURCE tells Homebrew to completely ignore bottles.
# We do this because the mirror currently only contains source packages.
ENV["HOMEBREW_BUILD_FROM_SOURCE"] = "1"

# HOMEBREW_DEVELOPER tells Homebrew to run in developer mode.
# We do this so that Homebrew will respect HOMEBREW_CURL_PATH
# and HOMEBREW_GIT_PATH below.
ENV["HOMEBREW_DEVELOPER"] = "1"

# HOMEBREW_CURL_PATH and HOMEBREW_GIT_PATH tell Homebrew where to look for
# `curl` and `git` executables when running in developer mode.
# In this case, they point to our URL-rewriting shim scripts.
ENV["HOMEBREW_CURL_PATH"] = File.expand_path "brew-offline-curl"
ENV["HOMEBREW_GIT_PATH"] = File.expand_path "brew-offline-git"

BREW_OFFLINE_DIR = File.expand_path "~/.offlinebrew"
BREW_OFFLINE_CONFIG = File.join BREW_OFFLINE_DIR, "config.json"

config = JSON.parse File.read(BREW_OFFLINE_CONFIG), symbolize_names: true

# Each of these flags would cause us to attempt to retrieve
# an asset that we don't mirror, so we catch them early on
# and warn the user about them expliciltly.
INVALID_FLAGS = %w[
  --force-bottle
  --devel
  --HEAD
].freeze

invalid_flags = ARGV & INVALID_FLAGS

odie "One or more invalid flags passed: #{invalid_flags.join(", ")}" if invalid_flags.any?

# This shouldn't be necessary thanks to HOMEBREW_BUILD_FROM_SOURCE, but putting
# in the ARGV may help us trace where things go wrong.
ARGV << "--build-from-source"

# Nuke Homebrew's cache. We don't want to assume that our mirroring server
# supports resumeable downloads or `git fetch`.
system "brew", "cleanup", "-s", "--prune=0"

# Reset homebrew/homebrew-core to the commit that we mirrored the package
# tree at. This prevents us from attempting to install either earlier or later
# versions of packages/resources than we have mirrored.
Dir.chdir CORE_TAP_DIR do
  `git checkout #{config[:commit]}`
end

system "brew", "install", *ARGV
