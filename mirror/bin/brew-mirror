#!/usr/bin/env brew ruby
# frozen_string_literal: true

# dump_formulae: given a Homebrew installation, dumps a JSON
# representation of all available packages.

require "optparse"
require "json"
require "securerandom"

# We need Homebrew's libraries.
abort "Make sure to run me via `brew ruby`!" unless Object.const_defined? :Homebrew

# Represents a mirrorable resource.
# A `fetchable` is anything that responds to `#fetch`.
# An `identifier` is a unique string that will ultimately identify the resource on the mirror.
# A `downloader` is also something that responds to `#fetch` and `#cached_location`
# A `url` is the resource's actual asset.
MirrorResource = Struct.new(:fetchable, :identifier, :downloader, :url)

# These are the simplest to support, and cover 99.9% of formulae.
# Notable exception: clang-format, which is in a SVN repo.
BREW_OFFLINE_DOWNLOAD_STRATEGIES = [
  CurlDownloadStrategy,
  CurlApacheMirrorDownloadStrategy,
  NoUnzipCurlDownloadStrategy,
  # NOTE: These don't have a stable checksum, so we fabricate an identifier for them.
  # See `sensible_identifier`.
  GitDownloadStrategy,
  GitHubGitDownloadStrategy,
].freeze

# Given a download strategy, produce a sensible and probably unique identifier.
def sensible_identifier(strategy, checksum = nil)
  case strategy
  when GitDownloadStrategy, GitHubGitDownloadStrategy
    # Git/GitHub resources don't have checksums and Homebrew doesn't make it easy
    # to retrieve their revision/last commit hash, so we just create a unique
    # identifier for them.
    # TODO(ww): We should cache or record the UUID we create here, so that we don't
    # end up mirroring the same revision of a `git` repository multiple times.
    SecureRandom.uuid
  else
    checksum.to_s
  end
end

# Given a download strategy and an (extant) download location,
# do any necessary preparation.
# For now, this just preps `git` repos so that they can be accessed
# via a dump HTTP mirror.
def prep_location!(strategy, location)
  case strategy
  when GitDownloadStrategy, GitHubGitDownloadStrategy
    Dir.chdir location do
      ohai "\t\tRepo prep: #{location}"
      if `git rev-parse --is-shallow-repository`.chomp == "true"
        ohai "\t\tFound what looks like a shallow repo, unshallowing it..."
        `git fetch --quiet --unshallow`
      end
      `git update-server-info`
    end
  end
end

options = {
  directory: "/Users/william/tmp/brew-mirror",
  baseurl: "http://localhost:8000",
  sleep: 0.5,
  config_only: false,
  iterator: Formula,
}

OptionParser.new do |parser|
  parser.banner = "Usage: brew ruby brew-mirror [options]"

  parser.on "-d", "--directory DIRECTORY" do |d|
    options[:directory] = d
  end

  parser.on "-s", "--sleep SECS", Float, "sleep between each formula download" do |s|
    options[:sleep] = s
  end

  parser.on "-c", "--config-only", "write configuration files but don't perform the mirror" do
    options[:config_only] = true
  end

  parser.on "-f", "--formulae f1,f2,f2", Array, "mirror just the given formulae" do |formulae|
    options[:iterator] = formulae.map { |f| Formula[f] }
  end
end.parse!

abort "Fatal: the output directory must exist" unless Dir.exist?(options[:directory])

# Dump the homebrew-core commit we're mirroring at, the timestamp,
# and the path of our cache to the directory that brew-offline reads.
ohai "Writing brew-offline config..."

config = {}

commit = begin
  core_dir = File.join HOMEBREW_LIBRARY, "Taps/homebrew/homebrew-core"
  Dir.chdir core_dir do
    `git rev-parse HEAD`.chomp
  end
end

config[:commit] = commit
config[:stamp] = Time.now.to_i.to_s
config[:cache] = options[:directory]
config[:baseurl] = options[:baseurl]

File.write File.join(options[:directory], "config.json"), config.to_json

exit if options[:config_only]

urlmap = {}

# Finally, fetch the (stable) resources for each formula in homebrew-core.
options[:iterator].each do |formula|
  # Skip formulae that aren't in the core tap.
  # TODO(ww): We can probably make a whitelist of other taps to mirror,
  # and expose it as a configuration or CLI option.
  next unless formula.tap.core_tap?

  ohai "Collecting resources for #{formula.name}..."

  # Build up a list of MirrorResources for the formula.
  # Every formula has three primary sources of resources:
  #   1. The top-level SoftwareSpec, in our case always the "stable" spec
  #   2. The resources (assets, in-tree dependencies) defined under the "stable" spec
  #   3. The patches for the "stable" spec
  resources = []

  resources << MirrorResource.new(formula.stable,
                                  sensible_identifier(formula.stable.downloader,
                                                      formula.stable.checksum),
                                  formula.stable.downloader,
                                  formula.stable.url)

  formula.stable.resources.each do |_name, res|
    resources << MirrorResource.new(res,
                                    sensible_identifier(res.downloader, res.checksum),
                                    res.downloader,
                                    res.url)
  end

  formula.stable.patches.select(&:external?).each do |patch|
    resources << MirrorResource.new(patch,
                                    sensible_identifier(patch.resource.downloader,
                                                        patch.resource.checksum),
                                    patch.resource.downloader,
                                    patch.url)
  end

  # Make sure every resource in the formula is retrievable via one of the
  # download strategies supported by our mirror, skipping (and logging) the formula
  # if one or more isn't.
  bad_resources = resources.reject do |res|
    BREW_OFFLINE_DOWNLOAD_STRATEGIES.include? res.downloader.class
  end

  # TODO(ww): Maybe just log unmirrorable resources, and allow users to attempt to
  # mirror them manually. I'm not sure yet what that will entail for SVN.
  if bad_resources.any?
    bad_resources.each do |res|
      opoo "#{formula.name} has an unmirrorable resource: #{res.url} (#{res.downloader.class})"
    end
    next
  end

  ohai "Downloading resources for #{formula.name}..."

  resources.each do |res|
    # We'll do the logging here.
    res.downloader.shutup!
    ohai "\tResource url: #{res.url}"

    old_location = res.downloader.cached_location
    new_location = Pathname.new(File.join(options[:directory],
                                          "#{res.identifier}#{old_location.extname}"))

    res.downloader.fetch unless new_location.exist?

    if new_location.exist?
      ohai "\tAlready migrated!"
    else
      FileUtils.mv old_location.to_s, new_location.to_s, force: true
      prep_location! res.downloader, new_location.to_s
      ohai "\t#{old_location} -> #{new_location}"
    end

    # Add to the urlmap regardless.
    urlmap[res.url] = new_location.basename
  end

  sleep options[:sleep]
end

File.write File.join(options[:directory], "urlmap.json"), urlmap.to_json
